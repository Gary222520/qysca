package nju.edu.cn.qysca.service.vulnerability;

import cn.hutool.core.util.StrUtil;
import nju.edu.cn.qysca.dao.vulnerability.CpeMatchDao;
import nju.edu.cn.qysca.dao.vulnerability.CveCpeDao;
import nju.edu.cn.qysca.domain.vulnerability.CpeMatchDO;
import nju.edu.cn.qysca.domain.vulnerability.CveCpeDO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class VulnerabilityServiceImpl implements VulnerabilityService{
    @Autowired
    private CpeMatchDao cpeMatchDao;

    @Autowired
    private CveCpeDao cveCpeDao;

    /**
     * 获取组件漏洞信息
     *
     * @param name     组件名称
     * @param version  组件版本
     * @param language 组件语言
     * @return 漏洞id列表
     */
    @Override
    public List<String> findVulnerabilities(String name, String version, String language) {
        String cpe=buildCpe(name,version,language);
        return findCveByCpe(cpe);
    }


    /**
     * 根据组件名称、版本、语言构造cpe uri
     * @param name 名称
     * @param version 版本
     * @param language 语言
     * @return cpe uri
     */
    private String buildCpe(String name, String version, String language){
        String cpe="";
        String versionClean= (version.startsWith("v") || version.startsWith("V")) ? version.substring(1) : version;
        switch (language){
            case "java":
                String jProducts=name.replace("/",":");
                jProducts= StrUtil.toUnderlineCase(jProducts);
                cpe="cpe:2.3:a:"+jProducts+":"+versionClean+":*:*:*:*:*:*:*";
                break;
            case "javaScript":
                String jsProducts=name.replace("/",":");
                cpe="cpe:2.3:a:"+jsProducts+":"+versionClean+":*:*:*:*:node.js:*:*";
                break;
            case "golang":
                if(name.startsWith("github.com/")){
                    String gProducts=name.substring(11);
                    gProducts=gProducts.replace("/",":");
                    cpe="cpe:2.3:a:"+gProducts+":"+versionClean+":*:*:*:*:*:*:*";
                }
                break;
            case "python":
                String pyProducts=name.replace("/",":");
                cpe="cpe:2.3:a:"+pyProducts+":"+versionClean+":*:*:*:*:*:*:*";
                break;
            default:
                break;
        }
        return cpe;
    }

    /**
     * 根据cpe查找对应的cve
     * @param cpe cpe uri
     * @return cpe id列表
     */
    private List<String> findCveByCpe(String cpe) {
        List<String> ans=new ArrayList<>();
        // 根据cpe，查找相配的cpe uri（含范围）
        List<CpeMatchDO> cpeMatchDOList=cpeMatchDao.findAllByNamesContainCpe(cpe);
        // 根据cpe uri(含范围)，查找相配的cve id
        for(CpeMatchDO cpeMatchDO: cpeMatchDOList){
            List<CveCpeDO> cveCpeDOList=cveCpeDao.findByUriAndVulnerable(cpeMatchDO.getUri(),true);
            // 检查版本范围
            for(CveCpeDO cveCpeDO: cveCpeDOList){
                Boolean flag1=(cveCpeDO.getVersionStart()==null && cpeMatchDO.getVersionStart()==null)
                        || Objects.equals(cveCpeDO.getVersionStart(), cpeMatchDO.getVersionStart());
                Boolean flag2=(cveCpeDO.getVersionEnd()==null && cpeMatchDO.getVersionEnd()==null)
                        || Objects.equals(cveCpeDO.getVersionEnd(), cpeMatchDO.getVersionEnd());
                Boolean flag3=(cveCpeDO.getStartInclude()==null && cpeMatchDO.getStartInclude()==null)
                        || Objects.equals(cveCpeDO.getStartInclude(), cpeMatchDO.getStartInclude());
                Boolean flag4= (cveCpeDO.getEndInclude()==null && cpeMatchDO.getEndInclude()==null)
                        || Objects.equals(cveCpeDO.getEndInclude(), cpeMatchDO.getEndInclude());
                if(flag1 && flag2 && flag3 && flag4){
                    ans.add(cveCpeDO.getCveId());
                }
            }
        }
        Collections.sort(ans);
        return ans;
    }


}
