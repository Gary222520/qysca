package nju.edu.cn.qysca.service.vulnerability;

import cn.hutool.core.util.StrUtil;
import nju.edu.cn.qysca.dao.application.AppComponentDao;
import nju.edu.cn.qysca.dao.application.ApplicationDao;
import nju.edu.cn.qysca.dao.vulnerability.CpeMatchDao;
import nju.edu.cn.qysca.dao.vulnerability.CveCpeDao;
import nju.edu.cn.qysca.dao.vulnerability.CveDao;
import nju.edu.cn.qysca.dao.vulnerability.CweDao;
import nju.edu.cn.qysca.domain.application.dos.AppComponentDO;
import nju.edu.cn.qysca.domain.application.dos.ApplicationDO;
import nju.edu.cn.qysca.domain.vulnerability.dos.CpeMatchDO;
import nju.edu.cn.qysca.domain.vulnerability.dos.CveCpeDO;
import nju.edu.cn.qysca.domain.vulnerability.dos.CveDO;
import nju.edu.cn.qysca.domain.vulnerability.dos.CweDO;
import nju.edu.cn.qysca.domain.vulnerability.dtos.CveBriefDTO;
import nju.edu.cn.qysca.exception.PlatformException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;

@Service
public class VulnerabilityServiceImpl implements VulnerabilityService{
    @Autowired
    private CpeMatchDao cpeMatchDao;

    @Autowired
    private CveCpeDao cveCpeDao;

    @Autowired
    private ApplicationDao applicationDao;

    @Autowired
    private AppComponentDao appComponentDao;

    @Autowired
    private CveDao cveDao;

    @Autowired
    private CweDao cweDao;

    /**
     * 根据cve id查找对应的信息
     *
     * @param cveId cve id
     * @return cve漏洞信息
     */
    @Override
    public CveDO findCveById(String cveId) {
        CveDO ans=cveDao.findOneByCveId(cveId);
        if(null==ans){
            throw new PlatformException(500,"无此漏洞信息记录");
        }
        return ans;
    }

    /**
     * 获取组件漏洞信息
     *
     * @param name     组件名称
     * @param version  组件版本
     * @param language 组件语言
     * @return 漏洞id列表
     */
    @Override
    public List<String> findVulnerabilities(String name, String version, String language) {
        String cpe=buildCpe(name,version,language);
        return findCveByCpe(cpe);
    }

    /**
     * 根据cwe id查找对应的漏洞类型信息
     *
     * @param cweId cwe id
     * @return cwe漏洞类型信息
     */
    @Override
    public CweDO findCweById(String cweId) {
        CweDO ans=cweDao.findOneByCweId(cweId);
        if(null==ans){
            throw new PlatformException(500,"无此漏洞类型信息记录");
        }
        return ans;
    }

    /**
     * 分页查询应用漏洞列表
     *
     * @param name    应用名称
     * @param version 应用版本
     * @param page 页号
     * @param size 页大小
     * @return 漏洞简明信息列表分页结果
     **/
    @Override
    public Page<CveBriefDTO> getCveList(String name, String version, int page, int size) {
        Pageable pageable = PageRequest.of(page - 1, size);
        ApplicationDO applicationDO = applicationDao.findByNameAndVersion(name, version);
        if (null == applicationDO) {
            throw new PlatformException(500, "无此应用");
        }
        Page<CveDO> tmpAns=cveDao.getCveList(Arrays.asList(applicationDO.getVulnerabilities()), pageable);
        List<CveBriefDTO> cveBriefDTOList=new ArrayList<>();
        for(CveDO cveDO:tmpAns){
            CveBriefDTO cveBriefDTO=new CveBriefDTO();
            cveBriefDTO.setCveId(cveDO.getCveId());
            cveBriefDTO.setProblemType(cveDO.getProblemType());
            cveBriefDTO.setCveAssigner(cveDO.getCveAssigner());
            cveBriefDTO.setPublishedDate(cveDO.getPublishedDate());
            cveBriefDTO.setLastModifiedDate(cveDO.getLastModifiedDate());
            if(cveDO.getCvss3().getAttackVector()!=null){
                cveBriefDTO.setAttackType(cveDO.getCvss3().getAttackVector());
            }else if(cveDO.getCvss2().getAccessVector()!=null){
                cveBriefDTO.setAttackType(cveDO.getCvss2().getAccessVector());
            }
            if(cveDO.getCvss3().getImpactScore()!=null){
                cveBriefDTO.setCvss3Score(cveDO.getCvss3().getImpactScore());
            }
            if(cveDO.getCvss2().getImpactScore()!=null){
                cveBriefDTO.setCvss2Score(cveDO.getCvss2().getImpactScore());
            }
            if(cveDO.getCvss3().getBaseSeverity()!=null){
                cveBriefDTO.setSeverity(cveDO.getCvss3().getBaseSeverity());
            }else if(cveDO.getCvss3().getImpactScore()!=null){
                Double score=cveDO.getCvss3().getImpactScore();
                cveBriefDTO.setSeverity(score>7.5?"HIGH":score>5?"MEDIUM":score>2.5?"LOW":"NONE");
            }else if(cveDO.getCvss2().getImpactScore()!=null){
                Double score=cveDO.getCvss2().getImpactScore();
                cveBriefDTO.setSeverity(score>7.5?"HIGH":score>5?"MEDIUM":score>2.5?"LOW":"NONE");
            }else{
                cveBriefDTO.setSeverity("UNKNOWN");
            }
            cveBriefDTOList.add(cveBriefDTO);
        }
        Page<CveBriefDTO> ans=new PageImpl<>(cveBriefDTOList,pageable,tmpAns.getTotalElements());
        return ans;
    }

    @Override
    @Transactional
    public Boolean addAppVulnerability(String name, String version, String vulName) {
        ApplicationDO applicationDO = applicationDao.findByNameAndVersion(name, version);
        if(applicationDO.getRelease() || applicationDO.getLock()){
            throw new PlatformException(500, "组件已经发布或锁定，禁止更新");
        }
        Set<String> vulnerabilitySet = new HashSet<>(Arrays.asList(applicationDO.getVulnerabilities()));
        vulnerabilitySet.add(vulName);
        applicationDO.setVulnerabilities(vulnerabilitySet.toArray(new String[0]));
        applicationDao.save(applicationDO);
        AppComponentDO appComponentDO = appComponentDao.findByNameAndVersion(name, version);
        if(appComponentDO != null) {
            appComponentDO.setVulnerabilities(vulnerabilitySet.toArray(new String[0]));
            appComponentDao.save(appComponentDO);
        }
        return true;
    }

    @Override
    @Transactional
    public Boolean deleteAppVulnerability(String name, String version, String vulName) {
        ApplicationDO applicationDO = applicationDao.findByNameAndVersion(name, version);
        if(applicationDO.getRelease() || applicationDO.getLock()){
            throw new PlatformException(500, "组件已经发布或锁定，禁止更新");
        }
        Set<String> vulnerabilitySet = new HashSet<>(Arrays.asList(applicationDO.getVulnerabilities()));
        vulnerabilitySet.remove(vulName);
        applicationDO.setVulnerabilities(vulnerabilitySet.toArray(new String[0]));
        applicationDao.save(applicationDO);
        AppComponentDO appComponentDO = appComponentDao.findByNameAndVersion(name, version);
        if(appComponentDO != null) {
            appComponentDO.setVulnerabilities(vulnerabilitySet.toArray(new String[0]));
            appComponentDao.save(appComponentDO);
        }
        return true;
    }

    /**
     * 根据组件名称、版本、语言构造cpe uri
     * @param name 名称
     * @param version 版本
     * @param language 语言
     * @return cpe uri
     */
    private String buildCpe(String name, String version, String language){
        String cpe="";
        String versionClean= (version.startsWith("v") || version.startsWith("V")) ? version.substring(1) : version;
        switch (language){
            case "java":
                String jProducts=name.replace("/",":");
                jProducts= StrUtil.toUnderlineCase(jProducts);
                cpe="cpe:2.3:a:"+jProducts+":"+versionClean+":*:*:*:*:*:*:*";
                break;
            case "javaScript":
                String jsProducts=name.replace("/",":");
                cpe="cpe:2.3:a:"+jsProducts+":"+versionClean+":*:*:*:*:node.js:*:*";
                break;
            case "golang":
                if(name.startsWith("github.com/")){
                    String gProducts=name.substring(11);
                    gProducts=gProducts.replace("/",":");
                    cpe="cpe:2.3:a:"+gProducts+":"+versionClean+":*:*:*:*:*:*:*";
                }
                break;
            case "python":
                String pyProducts=name.replace("/",":");
                cpe="cpe:2.3:a:"+pyProducts+":"+versionClean+":*:*:*:*:*:*:*";
                break;
            default:
                break;
        }
        return cpe;
    }

    /**
     * 根据cpe查找对应的cve
     * @param cpe cpe uri
     * @return cpe id列表
     */
    private List<String> findCveByCpe(String cpe) {
        List<String> ans=new ArrayList<>();
        // 根据cpe，查找相配的cpe uri（含范围）
        List<CpeMatchDO> cpeMatchDOList=cpeMatchDao.findAllByNamesContainCpe(cpe);
        // 根据cpe uri(含范围)，查找相配的cve id
        for(CpeMatchDO cpeMatchDO: cpeMatchDOList){
            List<CveCpeDO> cveCpeDOList=cveCpeDao.findByUriAndVulnerable(cpeMatchDO.getUri(),true);
            // 检查版本范围
            for(CveCpeDO cveCpeDO: cveCpeDOList){
                Boolean flag1=(cveCpeDO.getVersionStart()==null && cpeMatchDO.getVersionStart()==null)
                        || Objects.equals(cveCpeDO.getVersionStart(), cpeMatchDO.getVersionStart());
                Boolean flag2=(cveCpeDO.getVersionEnd()==null && cpeMatchDO.getVersionEnd()==null)
                        || Objects.equals(cveCpeDO.getVersionEnd(), cpeMatchDO.getVersionEnd());
                Boolean flag3=(cveCpeDO.getStartInclude()==null && cpeMatchDO.getStartInclude()==null)
                        || Objects.equals(cveCpeDO.getStartInclude(), cpeMatchDO.getStartInclude());
                Boolean flag4= (cveCpeDO.getEndInclude()==null && cpeMatchDO.getEndInclude()==null)
                        || Objects.equals(cveCpeDO.getEndInclude(), cpeMatchDO.getEndInclude());
                if(flag1 && flag2 && flag3 && flag4){
                    ans.add(cveCpeDO.getCveId());
                }
            }
        }
        Collections.sort(ans);
        return ans;
    }
}
