package nju.edu.cn.qysca.service.vulnerability;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MappingJsonFactory;
import nju.edu.cn.qysca.dao.vulnerability.CpeMatchDao;
import nju.edu.cn.qysca.domain.vulnerability.CpeMatchDO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

@Service
public class VulnerabilityDataServiceImpl {
    // 此服务仅用于漏洞数据库构建、维护

    @Autowired
    private CpeMatchDao cpeMatchDao;

    /**
     * 构建plt_vulnerability_cpe_match表数据
     * @param filepath 文件路径
     */
    public void createCpeMatch(String filepath){
        try{
            // 超大json文件 流式读取
            JsonFactory factory=new MappingJsonFactory();
            JsonParser jsonParser=factory.createJsonParser(new File(filepath));
            JsonToken current;
            current= jsonParser.nextToken();
            if(current!= JsonToken.START_OBJECT){
                System.err.println("Error parsing the JSON file: Root should be an object.");
                return;
            }
            while(jsonParser.nextToken() != JsonToken.END_OBJECT){
                String fieldName=jsonParser.getCurrentName();
                current= jsonParser.nextToken();
                if("matches".equals(fieldName)){
                    if(current == JsonToken.START_ARRAY){
                       List<CpeMatchDO> batch=new ArrayList<>();
                       int batchCount=0;
                       while(jsonParser.nextToken() != JsonToken.END_ARRAY){
                           // 针对数组中的每一条记录
                           JsonNode node=jsonParser.readValueAsTree();
                           CpeMatchDO cpe=new CpeMatchDO();
                           JsonNode uri=node.get("cpe23Uri");
                           if(null!=uri && !uri.asText().equals("")){
                               cpe.setUri(uri.asText());
                           }
                           JsonNode jsonNode1=node.get("versionStartIncluding");
                           JsonNode jsonNode2=node.get("versionStartExcluding");
                           JsonNode jsonNode3=node.get("versionEndIncluding");
                           JsonNode jsonNode4=node.get("versionEndExcluding");
                           if(null!=jsonNode1 && !jsonNode1.asText().equals("")){
                               cpe.setVersionStart(jsonNode1.asText());
                               cpe.setStartInclude(true);
                           } else if (null!=jsonNode2 && !jsonNode2.asText().equals("")) {
                               cpe.setVersionStart(jsonNode2.asText());
                               cpe.setStartInclude(false);
                           }
                           if(null!=jsonNode3 && !jsonNode3.asText().equals("")){
                               cpe.setVersionEnd(jsonNode3.asText());
                               cpe.setEndInclude(true);
                           }else if(null!=jsonNode4 && !jsonNode4.asText().equals("")){
                               cpe.setVersionEnd(jsonNode4.asText());
                               cpe.setEndInclude(false);
                           }
                           JsonNode cpe_names=node.get("cpe_name");
                           if(null!=cpe_names && cpe_names.isArray()){
                               List<String> names=new ArrayList<>();
                               for(JsonNode cpe_name:cpe_names){
                                   String name=cpe_name.get("cpe23Uri").asText();
                                   if(!cpe.getUri().equals(name)){
                                       names.add(name);
                                   }
                               }
                               cpe.setNames(names.toArray(new String[0]));
                           }
                           batch.add(cpe);
                           if(batch.size()==5000){
                               cpeMatchDao.saveAll(batch);
                               batch=new ArrayList<>();
                               System.out.println("SUCCESS INSERT BATCH: "+batchCount);
                               batchCount++;
                           }
                       }
                       if(batch.size()>0){
                           // 末批次插入
                           cpeMatchDao.saveAll(batch);
                           System.out.println("SUCCESS INSERT BATCH: "+batchCount);
                       }
                    }
                    else {
                        System.err.println("Expected array for field 'matches'");
                        jsonParser.skipChildren();
                    }
                }
                else{
                    System.err.println("Unexpected field: "+ fieldName);
                    jsonParser.skipChildren();
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }
    }

}
