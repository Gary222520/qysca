package nju.edu.cn.qysca.service.vulnerability;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MappingJsonFactory;
import nju.edu.cn.qysca.dao.vulnerability.CpeMatchDao;
import nju.edu.cn.qysca.dao.vulnerability.CveCpeDao;
import nju.edu.cn.qysca.dao.vulnerability.CveDao;
import nju.edu.cn.qysca.domain.vulnerability.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

@Service
public class VulnerabilityDataServiceImpl {
    // 此服务仅用于漏洞数据库构建、维护

    @Autowired
    private CpeMatchDao cpeMatchDao;

    @Autowired
    private CveDao cveDao;

    @Autowired
    private CveCpeDao cveCpeDao;

    /**
     * 构建plt_vulnerability_cpe_match表数据
     * @param filepath 文件路径
     */
    public void createCpeMatch(String filepath){
        try{
            // 超大json文件 流式读取
            JsonFactory factory=new MappingJsonFactory();
            JsonParser jsonParser=factory.createJsonParser(new File(filepath));
            JsonToken current;
            current= jsonParser.nextToken();
            if(current!= JsonToken.START_OBJECT){
                System.err.println("Error parsing the JSON file: Root should be an object.");
                return;
            }
            while(jsonParser.nextToken() != JsonToken.END_OBJECT){
                String fieldName=jsonParser.getCurrentName();
                current= jsonParser.nextToken();
                if("matches".equals(fieldName)){
                    if(current == JsonToken.START_ARRAY){
                       List<CpeMatchDO> batch=new ArrayList<>();
                       int batchCount=0;
                       while(jsonParser.nextToken() != JsonToken.END_ARRAY){
                           // 针对数组中的每一条记录
                           JsonNode node=jsonParser.readValueAsTree();
                           CpeMatchDO cpe=new CpeMatchDO();
                           JsonNode uri=node.get("cpe23Uri");
                           if(null!=uri && !uri.asText().equals("")){
                               cpe.setUri(uri.asText());
                           }
                           JsonNode jsonNode1=node.get("versionStartIncluding");
                           JsonNode jsonNode2=node.get("versionStartExcluding");
                           JsonNode jsonNode3=node.get("versionEndIncluding");
                           JsonNode jsonNode4=node.get("versionEndExcluding");
                           if(null!=jsonNode1 && !jsonNode1.asText().equals("")){
                               cpe.setVersionStart(jsonNode1.asText());
                               cpe.setStartInclude(true);
                           } else if (null!=jsonNode2 && !jsonNode2.asText().equals("")) {
                               cpe.setVersionStart(jsonNode2.asText());
                               cpe.setStartInclude(false);
                           }
                           if(null!=jsonNode3 && !jsonNode3.asText().equals("")){
                               cpe.setVersionEnd(jsonNode3.asText());
                               cpe.setEndInclude(true);
                           }else if(null!=jsonNode4 && !jsonNode4.asText().equals("")){
                               cpe.setVersionEnd(jsonNode4.asText());
                               cpe.setEndInclude(false);
                           }
                           JsonNode cpe_names=node.get("cpe_name");
                           if(null!=cpe_names && cpe_names.isArray()){
                               List<String> names=new ArrayList<>();
                               for(JsonNode cpe_name:cpe_names){
                                   String name=cpe_name.get("cpe23Uri").asText();
                                   if(!cpe.getUri().equals(name)){
                                       names.add(name);
                                   }
                               }
                               cpe.setNames(names.toArray(new String[0]));
                           }
                           batch.add(cpe);
                           if(batch.size()==5000){
                               cpeMatchDao.saveAll(batch);
                               batch=new ArrayList<>();
                               System.out.println("SUCCESS INSERT BATCH: "+batchCount);
                               batchCount++;
                           }
                       }
                       if(batch.size()>0){
                           // 末批次插入
                           cpeMatchDao.saveAll(batch);
                           System.out.println("SUCCESS INSERT BATCH: "+batchCount);
                       }
                    }
                    else {
                        System.err.println("Expected array for field 'matches'");
                        jsonParser.skipChildren();
                    }
                }
                else{
                    System.err.println("Unexpected field: "+ fieldName);
                    jsonParser.skipChildren();
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    /**
     * 构建plt_vulnerability_cve, plt_vulnerability_cve_cpe表数据
     * @param filepath 文件路径
     */
    public void createCve(String filepath){
        try{
            // 超大json文件 流式读取
            JsonFactory factory=new MappingJsonFactory();
            JsonParser jsonParser=factory.createJsonParser(new File(filepath));
            JsonToken current;
            current= jsonParser.nextToken();
            if(current!= JsonToken.START_OBJECT){
                System.err.println("Error parsing the JSON file: Root should be an object.");
                return;
            }
            while(jsonParser.nextToken() != JsonToken.END_OBJECT){
                // 跳过json头部四个键值对
                String fieldName=jsonParser.getCurrentName();
                current= jsonParser.nextToken();
                if("CVE_Items".equals(fieldName)){
                    if(current == JsonToken.START_ARRAY){
                        List<CveDO> batch1=new ArrayList<>();
                        List<CveCpeDO> batch2=new ArrayList<>();
                        int batchCount=0;
                        while(jsonParser.nextToken() != JsonToken.END_ARRAY){
                            // 针对数组中的每一条CVE_Item记录
                            JsonNode node=jsonParser.readValueAsTree();
                            CveDO cveDO =new CveDO();
                            // 获取字段：发布时间，最后修改时间
                            JsonNode publishedDate=node.get("publishedDate");
                            JsonNode lastModifiedDate=node.get("lastModifiedDate");
                            if(null!=publishedDate && !publishedDate.asText().equals("")){
                                cveDO.setPublishedDate(publishedDate.asText());
                            }
                            if(null!=lastModifiedDate && !lastModifiedDate.asText().equals("")){
                                cveDO.setLastModifiedDate(lastModifiedDate.asText());
                            }
                            // 获取字段：impact (cvss 2.x, cvss 3.x)
                            JsonNode impact=node.get("impact");
                            if(null!=impact){
                                JsonNode cvssV3=impact.get("baseMetricV3");
                                if(null!=cvssV3){
                                    cveDO.setCvss3(parseCVSS3(cvssV3));
                                }
                                JsonNode cvssV2=impact.get("baseMetricV2");
                                if(null!=cvssV2){
                                    cveDO.setCvss2(parseCVSS2(cvssV2));
                                }
                            }
                            // 获取字段：cve
                            JsonNode cveNode=node.get("cve");
                            if(null!=cveNode){
                                // CVE_data_meta
                                JsonNode cve_data_meta=cveNode.get("CVE_data_meta");
                                if(null!=cve_data_meta){
                                    JsonNode ID=cve_data_meta.get("ID");
                                    if(null!=ID && ID.isTextual()){
                                        cveDO.setCveId(ID.asText());
                                    }
                                    JsonNode ASSIGNER=cve_data_meta.get("ASSIGNER");
                                    if(null!=ASSIGNER && ASSIGNER.isTextual()){
                                        cveDO.setCveAssigner(ASSIGNER.asText());
                                    }
                                }
                                // problem_type
                                JsonNode problemtype=cveNode.get("problemtype");
                                if(null!=problemtype){
                                    List<String> problemtypeList=new ArrayList<>();
                                    JsonNode problemtype_data=problemtype.get("problemtype_data");
                                    if(null!=problemtype_data && problemtype_data.isArray()){
                                        for(JsonNode descriptionOut:problemtype_data){
                                            JsonNode description=descriptionOut.get("description");
                                            if(null!=description && description.isArray()){
                                                for(JsonNode descriptionIn:description){
                                                    JsonNode value=descriptionIn.get("value");
                                                    if(null!=value && value.isTextual()){
                                                        problemtypeList.add(value.asText());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if(problemtypeList.size()>0){
                                        cveDO.setProblemType(problemtypeList.toArray(new String[0]));
                                    }
                                }
                                // references
                                JsonNode references=cveNode.get("references");
                                if(null!=references){
                                    JsonNode reference_data=references.get("reference_data");
                                    if(null!=reference_data && reference_data.isArray()){
                                        for(JsonNode reference_dataIn:reference_data){
                                            CveReferenceDO cveReferenceDO=new CveReferenceDO();
                                            JsonNode rd_url=reference_dataIn.get("url");
                                            if(null!=rd_url && rd_url.isTextual()){
                                                cveReferenceDO.setUrl(rd_url.asText());
                                            }
                                            JsonNode rd_name=reference_dataIn.get("name");
                                            if(null!=rd_name && rd_name.isTextual()){
                                                cveReferenceDO.setName(rd_name.asText());
                                            }
                                            JsonNode rd_refSource=reference_dataIn.get("refsource");
                                            if(null!=rd_refSource && rd_refSource.isTextual()){
                                                cveReferenceDO.setRefSource(rd_refSource.asText());
                                            }
                                            JsonNode rd_tags=reference_dataIn.get("tags");
                                            if(null!=rd_tags && rd_tags.isArray()){
                                                for(JsonNode tag:rd_tags){
                                                    if(tag.isTextual()){
                                                       cveReferenceDO.getTags().add(tag.asText());
                                                    }
                                                }
                                            }
                                            cveDO.getReferences().add(cveReferenceDO);
                                        }
                                    }
                                }
                                // description
                                JsonNode description=cveNode.get("description");
                                if(null!=description){
                                    JsonNode description_data=description.get("description_data");
                                    if(null !=description_data && description_data.isArray()){
                                        List<String> description_list=new ArrayList<>();
                                        for(JsonNode description_dataIn:description_data){
                                            JsonNode ddi_value=description_dataIn.get("value");
                                            if(null !=ddi_value && ddi_value.isTextual()){
                                                description_list.add(ddi_value.asText());
                                            }
                                        }
                                        if(description_list.size()>0){
                                           cveDO.setDescriptions(description_list.toArray(new String[0]));
                                        }
                                    }
                                }
                            }
                            // 获取字段：configurations
                            JsonNode configurations=node.get("configurations");
                            if(null!=configurations){
                                JsonNode c_nodes=configurations.get("nodes");
                                if(null!=c_nodes && c_nodes.isArray()){
                                    for(JsonNode c_node:c_nodes){
                                        List<CveCpeDO> cveCpeDOList=parseConfigurationsNode(c_node);
                                        if(null!=cveCpeDOList && cveCpeDOList.size()>0){
                                            for(int i=0;i<cveCpeDOList.size();i++){
                                                cveCpeDOList.get(i).setCveId(cveDO.getCveId());
                                            }
                                            batch2.addAll(cveCpeDOList);
                                        }
                                    }
                                }
                            }
                            batch1.add(cveDO);
                            if(batch1.size()==2000){
                                cveDao.saveAll(batch1);
                                batch1=new ArrayList<>();
                                cveCpeDao.saveAll(batch2);
                                batch2=new ArrayList<>();
                                System.out.println("SUCCESS INSERT BATCH: "+batchCount);
                                batchCount++;
                            }
                        }
                        if(batch1.size()>0){
                            // 末批次插入
                            cveDao.saveAll(batch1);
                            cveCpeDao.saveAll(batch2);
                            System.out.println("SUCCESS INSERT BATCH: "+batchCount);
                        }
                    }
                    else {
                        System.err.println("Expected array for field 'matches'");
                        jsonParser.skipChildren();
                    }
                }
                else{
                    jsonParser.skipChildren();
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    /**
     * 解析Cvss3.x
     * @param jsonNode Json结点
     * @return cvss 3.x 信息
     */
    private CVSS3DO parseCVSS3(JsonNode jsonNode){
        CVSS3DO cvss3DO=new CVSS3DO();
        JsonNode exploitabilityScore=jsonNode.get("exploitabilityScore");
        if(null != exploitabilityScore && exploitabilityScore.isNumber()){
            cvss3DO.setExploitabilityScore(exploitabilityScore.asDouble());
        }
        JsonNode impactScore=jsonNode.get("impactScore");
        if(null != impactScore && impactScore.isNumber()){
            cvss3DO.setImpactScore(impactScore.asDouble());
        }
        JsonNode cvssV3=jsonNode.get("cvssV3");

        JsonNode version=cvssV3.get("version");
        if(null != version && version.isTextual()){
            cvss3DO.setVersion(version.asText());
        }
        JsonNode vectorString=cvssV3.get("vectorString");
        if(null != vectorString && vectorString.isTextual()){
            cvss3DO.setVectorString(vectorString.asText());
        }
        JsonNode attackVector=cvssV3.get("attackVector");
        if(null != attackVector && attackVector.isTextual()){
            cvss3DO.setAttackVector(attackVector.asText());
        }
        JsonNode attackComplexity=cvssV3.get("attackComplexity");
        if(null != attackComplexity && attackComplexity.isTextual()){
            cvss3DO.setAttackComplexity(attackComplexity.asText());
        }
        JsonNode privilegesRequired=cvssV3.get("privilegesRequired");
        if(null != privilegesRequired && privilegesRequired.isTextual()){
            cvss3DO.setPrivilegesRequired(privilegesRequired.asText());
        }
        JsonNode userInteraction=cvssV3.get("userInteraction");
        if(null != userInteraction && userInteraction.isTextual()){
            cvss3DO.setUserInteraction(userInteraction.asText());
        }
        JsonNode scope=cvssV3.get("scope");
        if(null != scope && scope.isTextual()){
            cvss3DO.setScope(scope.asText());
        }
        JsonNode confidentialityImpact=cvssV3.get("confidentialityImpact");
        if(null != confidentialityImpact && confidentialityImpact.isTextual()){
            cvss3DO.setConfidentialityImpact(confidentialityImpact.asText());
        }
        JsonNode integrityImpact=cvssV3.get("integrityImpact");
        if(null != integrityImpact && integrityImpact.isTextual()){
            cvss3DO.setIntegrityImpact(integrityImpact.asText());
        }
        JsonNode availabilityImpact=cvssV3.get("availabilityImpact");
        if(null != availabilityImpact && availabilityImpact.isTextual()){
            cvss3DO.setAvailabilityImpact(availabilityImpact.asText());
        }
        JsonNode baseScore=cvssV3.get("baseScore");
        if(null != baseScore && baseScore.isNumber()){
            cvss3DO.setBaseScore(baseScore.asDouble());
        }
        JsonNode baseSeverity=cvssV3.get("baseSeverity");
        if(null != baseSeverity && baseSeverity.isTextual()){
            cvss3DO.setBaseSeverity(baseSeverity.asText());
        }
        JsonNode exploitCodeMaturity=cvssV3.get("exploitCodeMaturity");
        if(null != exploitCodeMaturity && exploitCodeMaturity.isTextual()){
            cvss3DO.setExploitCodeMaturity(exploitCodeMaturity.asText());
        }
        JsonNode remediationLevel=cvssV3.get("remediationLevel");
        if(null != remediationLevel && remediationLevel.isTextual()){
            cvss3DO.setRemediationLevel(remediationLevel.asText());
        }
        JsonNode reportConfidence=cvssV3.get("reportConfidence");
        if(null != reportConfidence && reportConfidence.isTextual()){
            cvss3DO.setReportConfidence(reportConfidence.asText());
        }
        JsonNode temporalScore=cvssV3.get("temporalScore");
        if(null != temporalScore && temporalScore.isNumber()){
            cvss3DO.setTemporalScore(temporalScore.asDouble());
        }
        JsonNode temporalSeverity=cvssV3.get("temporalSeverity");
        if(null != temporalSeverity && temporalSeverity.isTextual()){
            cvss3DO.setTemporalSeverity(temporalSeverity.asText());
        }
        JsonNode confidentialityRequirement=cvssV3.get("confidentialityRequirement");
        if(null != confidentialityRequirement && confidentialityRequirement.isTextual()){
            cvss3DO.setConfidentialityRequirement(confidentialityRequirement.asText());
        }
        JsonNode integrityRequirement=cvssV3.get("integrityRequirement");
        if(null != integrityRequirement && integrityRequirement.isTextual()){
            cvss3DO.setIntegrityRequirement(integrityRequirement.asText());
        }
        JsonNode availabilityRequirement=cvssV3.get("availabilityRequirement");
        if(null != availabilityRequirement && availabilityRequirement.isTextual()){
            cvss3DO.setAvailabilityRequirement(availabilityRequirement.asText());
        }
        JsonNode modifiedAttackVector=cvssV3.get("modifiedAttackVector");
        if(null != modifiedAttackVector && modifiedAttackVector.isTextual()){
            cvss3DO.setModifiedAttackVector(modifiedAttackVector.asText());
        }
        JsonNode modifiedAttackComplexity=cvssV3.get("modifiedAttackComplexity");
        if(null != modifiedAttackComplexity && modifiedAttackComplexity.isTextual()){
            cvss3DO.setModifiedAttackComplexity(modifiedAttackComplexity.asText());
        }
        JsonNode modifiedPrivilegesRequired=cvssV3.get("modifiedPrivilegesRequired");
        if(null != modifiedPrivilegesRequired && modifiedPrivilegesRequired.isTextual()){
            cvss3DO.setModifiedPrivilegesRequired(modifiedPrivilegesRequired.asText());
        }
        JsonNode modifiedUserInteraction=cvssV3.get("modifiedUserInteraction");
        if(null != modifiedUserInteraction && modifiedUserInteraction.isTextual()){
            cvss3DO.setModifiedUserInteraction(modifiedUserInteraction.asText());
        }
        JsonNode modifiedScope=cvssV3.get("modifiedScope");
        if(null != modifiedScope && modifiedScope.isTextual()){
            cvss3DO.setModifiedScope(modifiedScope.asText());
        }
        JsonNode modifiedConfidentialityImpact=cvssV3.get("modifiedConfidentialityImpact");
        if(null != modifiedConfidentialityImpact && modifiedConfidentialityImpact.isTextual()){
            cvss3DO.setModifiedConfidentialityImpact(modifiedConfidentialityImpact.asText());
        }
        JsonNode modifiedIntegrityImpact=cvssV3.get("modifiedIntegrityImpact");
        if(null != modifiedIntegrityImpact && modifiedIntegrityImpact.isTextual()){
            cvss3DO.setModifiedIntegrityImpact(modifiedIntegrityImpact.asText());
        }
        JsonNode modifiedAvailabilityImpact=cvssV3.get("modifiedAvailabilityImpact");
        if(null != modifiedAvailabilityImpact && modifiedAvailabilityImpact.isTextual()){
            cvss3DO.setModifiedAvailabilityImpact(modifiedAvailabilityImpact.asText());
        }
        JsonNode environmentalScore=cvssV3.get("environmentalScore");
        if(null != environmentalScore && environmentalScore.isNumber()){
            cvss3DO.setEnvironmentalScore(environmentalScore.asDouble());
        }
        JsonNode environmentalSeverity=cvssV3.get("environmentalSeverity");
        if(null != environmentalSeverity && environmentalSeverity.isTextual()){
            cvss3DO.setEnvironmentalSeverity(environmentalSeverity.asText());
        }
        return cvss3DO;
    }

    /**
     * 解析Cvss2.x
     * @param jsonNode Json结点
     * @return cvss 2.x 信息
     */
    private CVSS2DO parseCVSS2(JsonNode jsonNode){
        CVSS2DO cvss2DO=new CVSS2DO();
        JsonNode severity=jsonNode.get("severity");
        if(null != severity && severity.isTextual()){
            cvss2DO.setSeverity(severity.asText());
        }
        JsonNode exploitabilityScore=jsonNode.get("exploitabilityScore");
        if(null != exploitabilityScore && exploitabilityScore.isNumber()){
            cvss2DO.setExploitabilityScore(exploitabilityScore.asDouble());
        }
        JsonNode impactScore=jsonNode.get("impactScore");
        if(null != impactScore && impactScore.isNumber()){
            cvss2DO.setImpactScore(impactScore.asDouble());
        }
        JsonNode acInsufInfo=jsonNode.get("acInsufInfo");
        if(null != acInsufInfo && acInsufInfo.isBoolean()){
            cvss2DO.setAcInsufInfo(acInsufInfo.asBoolean());
        }
        JsonNode obtainAllPrivilege=jsonNode.get("obtainAllPrivilege");
        if(null != obtainAllPrivilege && obtainAllPrivilege.isBoolean()){
            cvss2DO.setObtainAllPrivilege(obtainAllPrivilege.asBoolean());
        }
        JsonNode obtainUserPrivilege=jsonNode.get("obtainUserPrivilege");
        if(null != obtainUserPrivilege && obtainUserPrivilege.isBoolean()){
            cvss2DO.setObtainUserPrivilege(obtainUserPrivilege.asBoolean());
        }
        JsonNode obtainOtherPrivilege=jsonNode.get("obtainOtherPrivilege");
        if(null != obtainOtherPrivilege && obtainOtherPrivilege.isBoolean()){
            cvss2DO.setObtainOtherPrivilege(obtainOtherPrivilege.asBoolean());
        }
        JsonNode userInteractionRequired=jsonNode.get("userInteractionRequired");
        if(null != userInteractionRequired && userInteractionRequired.isBoolean()){
            cvss2DO.setUserInteractionRequired(userInteractionRequired.asBoolean());
        }
        JsonNode cvssV2=jsonNode.get("cvssV2");

        JsonNode version=cvssV2.get("version");
        if(null != version && version.isTextual()){
            cvss2DO.setVersion(version.asText());
        }
        JsonNode vectorString=cvssV2.get("vectorString");
        if(null != vectorString && vectorString.isTextual()){
            cvss2DO.setVectorString(vectorString.asText());
        }
        JsonNode accessVector=cvssV2.get("accessVector");
        if(null != accessVector && accessVector.isTextual()){
            cvss2DO.setAccessVector(accessVector.asText());
        }
        JsonNode accessComplexity=cvssV2.get("accessComplexity");
        if(null != accessComplexity && accessComplexity.isTextual()){
            cvss2DO.setAccessComplexity(accessComplexity.asText());
        }
        JsonNode authentication=cvssV2.get("authentication");
        if(null != authentication && authentication.isTextual()){
            cvss2DO.setAuthentication(authentication.asText());
        }
        JsonNode confidentialityImpact=cvssV2.get("confidentialityImpact");
        if(null != confidentialityImpact && confidentialityImpact.isTextual()){
            cvss2DO.setConfidentialityImpact(confidentialityImpact.asText());
        }
        JsonNode integrityImpact=cvssV2.get("integrityImpact");
        if(null != integrityImpact && integrityImpact.isTextual()){
            cvss2DO.setIntegrityImpact(integrityImpact.asText());
        }
        JsonNode availabilityImpact=cvssV2.get("availabilityImpact");
        if(null != availabilityImpact && availabilityImpact.isTextual()){
            cvss2DO.setAvailabilityImpact(availabilityImpact.asText());
        }
        JsonNode baseScore=cvssV2.get("baseScore");
        if(null != baseScore && baseScore.isNumber()){
            cvss2DO.setBaseScore(baseScore.asDouble());
        }
        JsonNode exploitability=cvssV2.get("exploitability");
        if(null != exploitability && exploitability.isTextual()){
            cvss2DO.setExploitability(exploitability.asText());
        }
        JsonNode remediationLevel=cvssV2.get("remediationLevel");
        if(null != remediationLevel && remediationLevel.isTextual()){
            cvss2DO.setRemediationLevel(remediationLevel.asText());
        }
        JsonNode reportConfidence=cvssV2.get("reportConfidence");
        if(null != reportConfidence && reportConfidence.isTextual()){
            cvss2DO.setReportConfidence(reportConfidence.asText());
        }
        JsonNode temporalScore=cvssV2.get("temporalScore");
        if(null != temporalScore && temporalScore.isNumber()){
            cvss2DO.setTemporalScore(temporalScore.asDouble());
        }
        JsonNode collateralDamagePotential=cvssV2.get("collateralDamagePotential");
        if(null != collateralDamagePotential && collateralDamagePotential.isTextual()){
            cvss2DO.setCollateralDamagePotential(collateralDamagePotential.asText());
        }
        JsonNode targetDistribution=cvssV2.get("targetDistribution");
        if(null != targetDistribution && targetDistribution.isTextual()){
            cvss2DO.setTargetDistribution(targetDistribution.asText());
        }
        JsonNode confidentialityRequirement=cvssV2.get("confidentialityRequirement");
        if(null != confidentialityRequirement && confidentialityRequirement.isTextual()){
            cvss2DO.setConfidentialityRequirement(confidentialityRequirement.asText());
        }
        JsonNode integrityRequirement=cvssV2.get("integrityRequirement");
        if(null != integrityRequirement && integrityRequirement.isTextual()){
            cvss2DO.setIntegrityRequirement(integrityRequirement.asText());
        }
        JsonNode availabilityRequirement=cvssV2.get("availabilityRequirement");
        if(null != availabilityRequirement && availabilityRequirement.isTextual()){
            cvss2DO.setAvailabilityRequirement(availabilityRequirement.asText());
        }
        JsonNode environmentalScore=cvssV2.get("environmentalScore");
        if(null != environmentalScore && environmentalScore.isNumber()){
            cvss2DO.setEnvironmentalScore(environmentalScore.asDouble());
        }

        return cvss2DO;
    }


    /**
     * 解析configurations node
     * @param jsonNode Json结点
     * @return configurations node 信息
     */
    private List<CveCpeDO> parseConfigurationsNode(JsonNode jsonNode){
        List<CveCpeDO> cpeList = new ArrayList<>();
        JsonNode cpe_match=jsonNode.get("cpe_match");
        if(null !=cpe_match && cpe_match.isArray()){
            for(JsonNode cpe_node:cpe_match) {
                CveCpeDO cveCpeDO = new CveCpeDO();
                JsonNode cpe23Uri = cpe_node.get("cpe23Uri");
                if (null != cpe23Uri && cpe23Uri.isTextual()) {
                    cveCpeDO.setUri(cpe23Uri.asText());
                }
                JsonNode vulnerable=cpe_node.get("vulnerable");
                if(null !=vulnerable && vulnerable.isBoolean()){
                    cveCpeDO.setVulnerable(vulnerable.asBoolean());
                }
                JsonNode jsonNode1=cpe_node.get("versionStartIncluding");
                JsonNode jsonNode2=cpe_node.get("versionStartExcluding");
                JsonNode jsonNode3=cpe_node.get("versionEndIncluding");
                JsonNode jsonNode4=cpe_node.get("versionEndExcluding");
                if(null!=jsonNode1 && !jsonNode1.asText().equals("")){
                    cveCpeDO.setVersionStart(jsonNode1.asText());
                    cveCpeDO.setStartInclude(true);
                } else if (null!=jsonNode2 && !jsonNode2.asText().equals("")) {
                    cveCpeDO.setVersionStart(jsonNode2.asText());
                    cveCpeDO.setStartInclude(false);
                }
                if(null!=jsonNode3 && !jsonNode3.asText().equals("")){
                    cveCpeDO.setVersionEnd(jsonNode3.asText());
                    cveCpeDO.setEndInclude(true);
                }else if(null!=jsonNode4 && !jsonNode4.asText().equals("")){
                    cveCpeDO.setVersionEnd(jsonNode4.asText());
                    cveCpeDO.setEndInclude(false);
                }
                cpeList.add(cveCpeDO);
            }
            JsonNode children=jsonNode.get("children");
            if(null!=children && children.isArray()){
                for(JsonNode child: children){
                    List<CveCpeDO> tmp=parseConfigurationsNode(child);
                    if(null!=tmp && tmp.size()>0){
                        cpeList.addAll(tmp);
                    }
                }
            }
        }
        return cpeList;
    }

}
