package nju.edu.cn.qysca.domain.statistics.dtos;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
@ApiModel(description = "漏洞对比DTO")
public class VulnerabilityCompareDTO implements Comparable<VulnerabilityCompareDTO>{

    @ApiModelProperty(value = "应用名称", example = "qysca")
    private String name;

    @ApiModelProperty(value = "应用版本", example = "1.0.0")
    private String version;

    @ApiModelProperty(value = "HIGH漏洞数量", example = "10")
    private int HIGH;

    @ApiModelProperty(value = "MEDIUM漏洞数量", example = "20")
    private int MEDIUM;

    @ApiModelProperty(value = "LOW漏洞数量", example = "30")
    private int LOW;

    @ApiModelProperty(value = "NONE漏洞数量", example = "40")
    private int NONE;

    @ApiModelProperty(value = "UNKNOWN漏洞数量", example = "50")
    private int UNKNOWN;

    public int getTotalVulnerabilities() {
        return HIGH + MEDIUM + LOW + NONE + UNKNOWN;
    }

    @Override
    // 实现Comparable接口的compareTo方法，根据漏洞总数进行排序
    public int compareTo(VulnerabilityCompareDTO o) {

        int totalComparison = Integer.compare(o.getTotalVulnerabilities(), this.getTotalVulnerabilities());
        if (totalComparison != 0) return totalComparison;

        // 如果总数相同，则依次比较HIGH、MEDIUM、LOW、NONE、UNKNOWN
        int highComparison = Integer.compare(o.HIGH, this.HIGH);
        if (highComparison != 0) return highComparison;

        int mediumComparison = Integer.compare(o.MEDIUM, this.MEDIUM);
        if (mediumComparison != 0) return mediumComparison;

        int lowComparison = Integer.compare(o.LOW, this.LOW);
        if (lowComparison != 0) return lowComparison;

        int noneComparison = Integer.compare(o.NONE, this.NONE);
        if (noneComparison != 0) return noneComparison;

        return Integer.compare(o.UNKNOWN, this.UNKNOWN);
    }
}
