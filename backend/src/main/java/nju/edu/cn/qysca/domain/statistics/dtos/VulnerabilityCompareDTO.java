package nju.edu.cn.qysca.domain.statistics.dtos;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.HashMap;
import java.util.Map;

@Data
@AllArgsConstructor
@NoArgsConstructor
@ApiModel(description = "漏洞对比DTO")
public class VulnerabilityCompareDTO implements Comparable<VulnerabilityCompareDTO>{

    @ApiModelProperty(value = "应用名称", example = "qysca")
    private String name;

    @ApiModelProperty(value = "应用版本", example = "1.0.0")
    private String version;

    @ApiModelProperty(value = "漏洞数量")
    private Map<String, Integer> map = new HashMap<>();

    public int getTotalVulnerabilities() {
        return map.values().stream().mapToInt(Integer::intValue).sum();
    }

    @Override
    // 实现Comparable接口的compareTo方法，根据漏洞总数进行排序
    public int compareTo(VulnerabilityCompareDTO o) {

        int totalComparison = Integer.compare(o.getTotalVulnerabilities(), this.getTotalVulnerabilities());
        if (totalComparison != 0) return totalComparison;

        // 如果总数相同，则依次比较HIGH、MEDIUM、LOW、NONE、UNKNOWN
        int criticalComparison = Integer.compare(o.getMap().get("CRITICAL"), this.getMap().get("CRITICAL"));
        if (criticalComparison != 0) return criticalComparison;

        int highComparison = Integer.compare(o.getMap().get("HIGH"), this.getMap().get("HIGH"));
        if (highComparison != 0) return highComparison;

        int mediumComparison = Integer.compare(o.getMap().get("MEDIUM"), this.getMap().get("MEDIUM"));
        if (mediumComparison != 0) return mediumComparison;

        int lowComparison = Integer.compare(o.getMap().get("LOW"), this.getMap().get("LOW"));
        if (lowComparison != 0) return lowComparison;

        int noneComparison = Integer.compare(o.getMap().get("NONE"), this.getMap().get("NONE"));
        if (noneComparison != 0) return noneComparison;

        return Integer.compare(o.getMap().get("UNKNOWN"), this.getMap().get("UNKNOWN"));
    }
}
